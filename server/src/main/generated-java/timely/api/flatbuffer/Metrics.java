// automatically generated by the FlatBuffers compiler, do not modify

package timely.api.flatbuffer;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Metrics extends Table {
  public static Metrics getRootAsMetrics(ByteBuffer _bb) { return getRootAsMetrics(_bb, new Metrics()); }
  public static Metrics getRootAsMetrics(ByteBuffer _bb, Metrics obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean MetricsBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "TMFB"); }
  public Metrics __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public Metric metrics(int j) { return metrics(new Metric(), j); }
  public Metric metrics(Metric obj, int j) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int metricsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createMetrics(FlatBufferBuilder builder,
      int metricsOffset) {
    builder.startObject(1);
    Metrics.addMetrics(builder, metricsOffset);
    return Metrics.endMetrics(builder);
  }

  public static void startMetrics(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addMetrics(FlatBufferBuilder builder, int metricsOffset) { builder.addOffset(0, metricsOffset, 0); }
  public static int createMetricsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMetricsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endMetrics(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishMetricsBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "TMFB"); }
}

