// automatically generated by the FlatBuffers compiler, do not modify

package timely.api.flatbuffer;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Metric extends Table {
  public static Metric getRootAsMetric(ByteBuffer _bb) { return getRootAsMetric(_bb, new Metric()); }
  public static Metric getRootAsMetric(ByteBuffer _bb, Metric obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public Metric __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public long timestamp() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public double value() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public Tag tags(int j) { return tags(new Tag(), j); }
  public Tag tags(Tag obj, int j) { int o = __offset(10); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int tagsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }

  public static int createMetric(FlatBufferBuilder builder,
      int nameOffset,
      long timestamp,
      double value,
      int tagsOffset) {
    builder.startObject(4);
    Metric.addValue(builder, value);
    Metric.addTimestamp(builder, timestamp);
    Metric.addTags(builder, tagsOffset);
    Metric.addName(builder, nameOffset);
    return Metric.endMetric(builder);
  }

  public static void startMetric(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(1, timestamp, 0); }
  public static void addValue(FlatBufferBuilder builder, double value) { builder.addDouble(2, value, 0.0); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(3, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endMetric(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

