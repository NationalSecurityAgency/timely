// automatically generated by the FlatBuffers compiler, do not modify

package timely.api.flatbuffer;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Metrics extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_5_26(); }
  public static Metrics getRootAsMetrics(ByteBuffer _bb) { return getRootAsMetrics(_bb, new Metrics()); }
  public static Metrics getRootAsMetrics(ByteBuffer _bb, Metrics obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean MetricsBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "TMFB"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Metrics __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public timely.api.flatbuffer.Metric metrics(int j) { return metrics(new timely.api.flatbuffer.Metric(), j); }
  public timely.api.flatbuffer.Metric metrics(timely.api.flatbuffer.Metric obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int metricsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public timely.api.flatbuffer.Metric.Vector metricsVector() { return metricsVector(new timely.api.flatbuffer.Metric.Vector()); }
  public timely.api.flatbuffer.Metric.Vector metricsVector(timely.api.flatbuffer.Metric.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createMetrics(FlatBufferBuilder builder,
      int metricsOffset) {
    builder.startTable(1);
    Metrics.addMetrics(builder, metricsOffset);
    return Metrics.endMetrics(builder);
  }

  public static void startMetrics(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addMetrics(FlatBufferBuilder builder, int metricsOffset) { builder.addOffset(0, metricsOffset, 0); }
  public static int createMetricsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMetricsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endMetrics(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishMetricsBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "TMFB"); }
  public static void finishSizePrefixedMetricsBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "TMFB"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Metrics get(int j) { return get(new Metrics(), j); }
    public Metrics get(Metrics obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

